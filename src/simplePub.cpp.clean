// This program is  a node called simplePub.  A  node is an executable
// connected  to  the  ROS  network.  This  node  demonstrates  simple
// sending  of  messages over  the  ROS  system,  or publishing  on  a
// specific topic.


#include "ros/ros.h"

#include <sstream>

// for this to work must have: include_directories(include) in CMakeLists.txt
// #include "voice_node/voice_node.h"
#include "voice_node/simplePub.h"



namespace voice_node{


  voiceSimplePub::voiceSimplePub(ros::NodeHandle nh){
    
    // Send messages, or publish to the txt4TTStopic:
    // Publisher Object = txt4TTSpubObj; Topic Name = txt4TTStopic;
    // Message Buffer size = 1000 messages; Message Type is std_msgs/String
    //
    int nodeBufSize = 1000;
    txt4TTSpubObj =
      nh.advertise<std_msgs::String>("txt4TTStopic", nodeBufSize);
    voiceNamePubObj =
      nh.advertise<std_msgs::String>("voiceNameTopic",nodeBufSize);
    
    // timerCallback call rate is 1/rate, or rateHz. 
    int rate = 10;
    
    // Create timer callback function.
    timerObj = nh.createTimer(ros::Duration(1/rate),
			      &voiceSimplePub::timerCallback, this);
  }

      
  void voiceSimplePub::timerCallback(const ros::TimerEvent& event){
  
    // This is a message object. You stuff it with data, and then publish it.
    //
    // std_msgs::String txt4TTS;
    std::stringstream ss1;
    ss1 << "Hi there Simone";
    txt4TTS.data = ss1.str();
  
    //std_msgs::String voiceName;
    std::stringstream ss2;
    ss2 << "nitech_us_slt_arctic_hts";
    voiceName.data = ss2.str();
    
    // Broadcast to the world, rosout and other subscribers to the topic.
    // ROS_INFO..etc replaces printf/cout.
    //
    ROS_INFO( "%s", txt4TTS.data.c_str() );
    ROS_INFO( "%s", voiceName.data.c_str() );
    
    // voice_node::voice_node msg;
    // voice_node::txt4TTS;
    // msg.txt4TTS = txt4TTS.data;
    // msg.voiceName = voiceName.data; 
    
    //  Send standard string message, object type must be as in advertise().
    //
    //  txt4TTSpubObj.publish(msg.txt4TTS);
    //  voiceNamePubObj.publish(msg.voiceName);
    txt4TTSpubObj.publish(txt4TTS);
    voiceNamePubObj.publish(voiceName);
  }


} // name_space voice_node

